{"version":3,"sources":["dft.ts","filter.ts","test/filter_test.ts"],"names":[],"mappings":"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","file":"filter_test.602af18b.js","sourceRoot":"..","sourcesContent":["export namespace DFT {\n\n    export class Complex {\n        readonly real : number;\n        readonly imaginary : number;\n\n        constructor(real : number, imaginary : number) {\n            this.real = real;\n            this.imaginary = imaginary;\n        }\n\n        static FromExp(theta : number) : Complex {\n            return new Complex(Math.cos(theta), Math.sin(theta))\n        }\n\n        static Sum(complexes : Array<Complex>) {\n            let ret = new Complex(0, 0);\n            complexes.forEach(complex => ret = ret.add(complex));\n            return ret;\n        }\n\n        add(other : Complex) : Complex {\n            const real = this.real + other.real;\n            const imaginary = this.imaginary + other.imaginary;\n            return new Complex(real, imaginary);\n        }\n\n        sub(other : Complex) : Complex {\n            const real = this.real - other.real;\n            const imaginary = this.imaginary - other.imaginary;\n            return new Complex(real, imaginary);\n        }\n\n        mul(other : Complex) : Complex {\n            const real = this.real * other.real - this.imaginary * other.imaginary;\n            const imaginary = this.real * other.imaginary + this.imaginary * other.real;\n            return new Complex(real, imaginary);\n        }\n    }\n\n    export function realDFT(f : Array<number>) : Array<Complex>{\n        return dft(f.map(r => new Complex(r, 0)));\n    }\n\n    // 雑にフーリエ変換\n    function dft(f : Array<Complex>) : Array<Complex>{\n        const N = f.length, T = -2 * Math.PI / N;\n        const r = (new Array(N)).fill(0).map((_, k) => Complex.Sum(\n            f.map((fn, n) => Complex.FromExp(T * n * k).mul(fn))\n        ));\n        return r;\n    }\n\n    // 雑にフーリエ逆変換\n    export function idft(f : Array<Complex>) : Array<Complex>{\n        const N = f.length, T = 2 * Math.PI / N;\n        const r = (new Array(N)).fill(0).map((_, k) => Complex.Sum(\n            f.map((fn, n) => Complex.FromExp(T * n * k).mul(fn).mul(new Complex(1/N, 0)))\n        ));\n        return r;\n    }\n\n    // 雑にフーリエ変換その2\n    export function fft(f : Array<Complex>) : Array<Complex> {\n        if (f.length % 2 !== 0) return dft(f);\n        const arr = (new Array(f.length)).fill(0).map((_, k) => k);\n        // 配列fを2つの配列に分ける\n        const arr0 = arr.filter(n => n % 2 === 0).map(n => f[n]);\n        const arr1 = arr.filter(n => n % 2 === 1).map(n => f[n]);\n        // 2つの要素をそれぞれフーリエ変換\n        const dft0 = fft(arr0);\n        const dft1 = fft(arr1);\n        // いい感じに足す\n        return arr.map(n => dft0[n % (arr.length/2)].add(Complex.FromExp(-n * 2 * Math.PI / arr.length).mul(dft1[n % (arr.length/2)])));\n    }\n\n        // 雑に逆フーリエ変換その2\n        export function ifft(F : Array<Complex>) : Array<Complex> {\n            F.map(c => new Complex(c.real, -c.imaginary));\n            const result = fft(F);\n            return result.map(c => new Complex(c.real, -c.imaginary).mul(new Complex(1/F.length, 0)));\n        }\n\n    export function realFFT(f: Array<number>) : Array<Complex> {\n        if (f.length >= 512 && f.length % 2 !== 0) {\n            return fft(f.map(n => new Complex(n, 0)).slice(0, f.length-1));\n        }\n        return fft(f.map(n => new Complex(n, 0)));\n    }\n}\n","// 各種フィルタを集めたnamespace\n// constructorで設置してoffset順にupdateを実行することでリアルタイムな処理も可能\nexport namespace Filter {\n    // バックフォワードコムフィルタ\n    export class CombFilter {\n        private _buffer1 : Array<number>;\n        //private _buffer2 : Array<number>;\n        private _f : number;\n        private _N : number;\n        private _offset : number;\n\n        constructor(f : number, N : number) {\n            this._f = f;\n            this._N = N;\n            this._offset = 0;\n            this._buffer1 = new Array<number>(this._N+1).fill(0, 0, this._N+1);\n            //this._buffer2 = new Array<number>(2).fill(0, 0, 2);\n        }\n\n        update(input : number) : number {\n            this._offset++;\n            const offset1W = (this._offset % this._buffer1.length);\n            let offset1R = offset1W - this._N;\n            while (offset1R < 0) {\n                offset1R += this._buffer1.length;\n            }\n            const ret = this._buffer1[offset1R] * this._f + input;\n            this._buffer1[offset1W] = -ret;\n            return ret;\n        }\n    }\n\n    // Low-pass Comb Filter(だと思うもの)\n    // See: https://ccrma.stanford.edu/~jos/pasp/Lowpass_Feedback_Comb_Filter.html\n    export class FeedbackCombFilter {\n        private _buffer1 : Array<number>;\n        private _buffer2 : Array<number>;\n        private _f : number;\n        private _d : number;\n        private _N : number;\n        private _offset : number;\n\n        constructor(f : number, d : number, N : number) {\n            this._f = f;\n            this._d = d;\n            this._N = N;\n            this._offset = 0;\n            this._buffer1 = new Array<number>(this._N+1).fill(0, 0, this._N+1);\n            this._buffer2 = new Array<number>(2).fill(0, 0, 2);\n        }\n\n        update(input : number) : number {\n            this._offset++;\n            const offset1W = (this._offset % this._buffer1.length);\n            let offset1R = offset1W - (this._buffer1.length-1);\n            while (offset1R < 0) {\n                offset1R += this._buffer1.length;\n            }\n            const offset2W = (this._offset % this._buffer2.length);\n            let offset2R = offset2W - (this._buffer2.length-1);\n            while (offset2R < 0) {\n                offset2R += this._buffer2.length;\n            }\n            const R = (1 - this._d) * this._buffer1[offset1R] + this._d * this._buffer2[offset2R]\n            const ret = this._buffer1[offset1W];\n            this._buffer2[offset2W] = R;\n            this._buffer1[offset1W] = input + this._f * R;\n            return ret;\n        }\n    }\n\n    // All-pass Filter(だと思うもの)\n    // See: http://shinngoushori.com/wp-content/uploads/2018/05/all_pass_filter-1.pdf\n    export class AllpassFilter {\n        private _buffer1 : Array<number>;\n        //private _buffer2 : Array<number>;\n        private _a : number;\n        private _D : number;\n        private _offset : number;\n\n        constructor(a : number, D : number) {\n            this._a = a;\n            this._D = D;\n            this._offset = 0;\n            this._buffer1 = new Array<number>(this._D+1).fill(0, 0, this._D+1);\n            //this._buffer2 = new Array<number>(2).fill(0, 0, 2);\n        }\n\n        update(input : number) : number {\n            this._offset++;\n            const offset1W = (this._offset % this._buffer1.length);\n            let offset1R = offset1W - this._D;\n            while (offset1R < 0) {\n                offset1R += this._buffer1.length;\n            }\n            const ret = this._buffer1[offset1R] - this._a * input; \n            this._buffer1[offset1W] = input + this._a * ret;\n            return ret;\n        }\n    }\n\n    // リバーブ処理を行うフィルタ(Freeverbというアルゴリズムを参考にしている)\n    // いい感じに処理させるためコンストラクタに入力のサンプリング周波数が必要(デフォルト44100Hzを想定)\n    // See: https://ccrma.stanford.edu/~jos/pasp/Freeverb.html\n    // See: http://dsp-book.narod.ru/soundproc.pdf pp.77-81\n    export class Reverber {\n        gain      : number = 0.015;\n        dry       : number = 0;\n        frequency : number = 44100;\n        static readonly defaultFrequency = 44100;\n        private _wet = 1 / 3;\n        get wet() {\n            return this._wet;\n        }\n        set wet(v : number) {\n            this._wet = v;\n            this._wet1 = this._wet * (this._width / 2 + 0.5);\n            this._wet2 = this._wet * ((1-this._width)/2);\n        }\n        private _width = 1;\n        private _wet1 = this._wet * (this._width / 2 + 0.5);\n        private _wet2 = this._wet * ((1-this._width)/2);\n\n        private readonly _fdnsR : Array<[number, number, number]> = [\n            [0.84, 0.2, 1557+23],\n            [0.84, 0.2, 1617+23],\n            [0.84, 0.2, 1491+23],\n            [0.84, 0.2, 1422+23],\n            [0.84, 0.2, 1277+23],\n            [0.84, 0.2, 1356+23],\n            [0.84, 0.2, 1188+23],\n            [0.84, 0.2, 1116+23],\n        ];\n        private readonly _fdnsL : Array<[number, number, number]> = [\n            [0.84, 0.2, 1557],\n            [0.84, 0.2, 1617],\n            [0.84, 0.2, 1491],\n            [0.84, 0.2, 1422],\n            [0.84, 0.2, 1277],\n            [0.84, 0.2, 1356],\n            [0.84, 0.2, 1188],\n            [0.84, 0.2, 1116],\n        ];\n        private readonly _aps : Array<[number, number]> = [\n            [0.5, 225],\n            [0.5, 556],\n            [0.5, 441],\n            [0.5, 341],\n        ];\n\n        private _LBCF1L : [FeedbackCombFilter, FeedbackCombFilter, FeedbackCombFilter, FeedbackCombFilter];\n        private _LBCF2L : [FeedbackCombFilter, FeedbackCombFilter, FeedbackCombFilter, FeedbackCombFilter];\n        private _LBCF1R : [FeedbackCombFilter, FeedbackCombFilter, FeedbackCombFilter, FeedbackCombFilter];\n        private _LBCF2R : [FeedbackCombFilter, FeedbackCombFilter, FeedbackCombFilter, FeedbackCombFilter];\n        private _APF : [AllpassFilter, AllpassFilter, AllpassFilter, AllpassFilter];\n\n        constructor(frequency : number = Reverber.defaultFrequency) {\n            this._LBCF1R = [null, null, null, null];\n            this._LBCF2R = [null, null, null, null];\n            this._LBCF1L = [null, null, null, null];\n            this._LBCF2L = [null, null, null, null];\n            this._APF = [null, null, null, null];\n            for(let i = 0; i < 4; i++) {\n                this._LBCF1R[i] = new FeedbackCombFilter(this._fdnsR[i][0], this._fdnsR[i][1], Math.ceil(this._fdnsR[i][2] * frequency / Reverber.defaultFrequency));\n                this._LBCF2R[i] = new FeedbackCombFilter(this._fdnsR[i+4][0], this._fdnsR[i+4][1], Math.ceil(this._fdnsR[i+4][2] * frequency / Reverber.defaultFrequency));\n                this._LBCF1L[i] = new FeedbackCombFilter(this._fdnsL[i][0], this._fdnsL[i][1], Math.ceil(this._fdnsL[i][2] * frequency / Reverber.defaultFrequency));\n                this._LBCF2L[i] = new FeedbackCombFilter(this._fdnsL[i+4][0], this._fdnsL[i+4][1], Math.ceil(this._fdnsL[i+4][2] * frequency / Reverber.defaultFrequency));\n                this._APF[i] = new AllpassFilter(this._aps[i][0], Math.ceil(this._aps[i][1] * frequency / Reverber.defaultFrequency));\n            }\n        }\n\n        update(inputR : number, inputL : number) : [number, number] {\n            // R\n            let resultR : number;\n            {\n                const input = (inputR + inputL) * this.gain;\n                const result1s = this._LBCF1R.map(lbcf => lbcf.update(input));\n                const result2s = this._LBCF2R.map(lbcf => lbcf.update(input));\n\n                const result1 = result1s.reduce((a, b) => a+b, 0);\n                const result2 = result2s.reduce((a, b) => a+b, 0);\n\n                const lbcfResult = result1 + result2;\n\n                const resultA = this._APF[0].update(lbcfResult);\n                const resultB = this._APF[1].update(resultA);\n                const resultC = this._APF[2].update(resultB);\n                const resultD = this._APF[3].update(resultC);\n                resultR = resultD;\n            }\n\n            // R\n            let resultL : number;\n            {\n                const input = (inputR + inputL) * this.gain;\n                const result1s = this._LBCF1L.map(lbcf => lbcf.update(input));\n                const result2s = this._LBCF2L.map(lbcf => lbcf.update(input));\n\n                const result1 = result1s.reduce((a, b) => a+b, 0);\n                const result2 = result2s.reduce((a, b) => a+b, 0);\n\n                const lbcfResult = result1 + result2;\n\n                const resultA = this._APF[0].update(lbcfResult);\n                const resultB = this._APF[1].update(resultA);\n                const resultC = this._APF[2].update(resultB);\n                const resultD = this._APF[3].update(resultC);\n                resultL = resultD;\n            }\n\n            return [\n                inputR * this.dry + this._wet1 * resultR + this._wet2 * resultL,\n                inputL * this.dry + this._wet1 * resultL + this._wet2 * resultR,\n            ]\n        }\n    }\n}","import { DFT } from '../dft';\nimport { Filter } from '../filter';\n\nabstract class FilterTester {\n    protected readonly _button : HTMLButtonElement;\n    protected readonly _num : number;\n\n    constructor(button : HTMLButtonElement, num : number) {\n        this._button = button;\n        this._num = num;\n        this._button.onclick = () => {this._impulse()};\n    }\n\n    _impulse() {\n    }\n}\n\nclass FeedbackCombFilterTester extends FilterTester {\n    private _filter : Filter.FeedbackCombFilter;\n    private _callback : (s : [string, string]) => void;\n\n    private _g : Array<number>;\n    constructor(button : HTMLButtonElement, num : number, N : number, f : number, d : number, callback : (s : [string, string]) => void) {\n        super(button, num);\n        this._filter = new Filter.FeedbackCombFilter(f, d, N);\n        this._callback = callback;\n\n        this._g = new Array(num);\n    }\n\n    _impulse()  {\n        this._g.fill(0, 0, this._num).map((y, x) => 0);\n        this._g[0] = 1;\n        const g2 = new Array();\n        let outputText = \"\";\n        for(let i = 0; i < this._num; i++) {\n            g2[i] = this._filter.update(this._g[i]);\n            outputText += `${i} ${g2[i]} \\n`;\n        }\n        const fftSize = 2 ** (Math.floor(Math.log2(this._num)));\n        const FFTresult = DFT.realFFT(g2.slice(0, fftSize));\n        let outputTextFFT = \"\";\n        FFTresult.forEach((f, i) => {\n            outputTextFFT += `${i} ${((f.real ** 2) + (f.imaginary ** 2)) ** 0.5}\\n`;\n        });\n        this._callback([outputText, outputTextFFT]);\n    }\n}\n\nfunction main() {\n    const num = 131072;\n    \n    const N = 1573;\n    const f = 0.84;\n    const d = 0.20;\n    \n    const textarea1 = document.createElement('textarea');\n    textarea1.cols = 50;\n    textarea1.rows = 50;\n    const textarea2 = document.createElement('textarea');\n    textarea2.cols = 50;\n    textarea2.rows = 50;\n    const button = document.createElement('button');\n    button.innerText = \"CombFilterTest\";\n    document.body.appendChild(textarea1);\n    document.body.appendChild(textarea2);\n    document.body.appendChild(button);\n    \n    new FeedbackCombFilterTester(button, num, N, f, d, (result) => {\n        textarea1.value = result[0];\n        textarea2.value = result[1];\n    });\n}\n\nwindow.addEventListener('DOMContentLoaded', main);"]}